(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{"4TXc":function(e,t,a){"use strict";a.r(t),a.d(t,"_frontmatter",(function(){return c})),a.d(t,"default",(function(){return s}));a("91GP"),a("rGqo"),a("yt8O"),a("Btvt"),a("RW0V"),a("q1tI");var r=a("7ljp"),o=a("013z");a("qKvR");function n(){return(n=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var a=arguments[t];for(var r in a)Object.prototype.hasOwnProperty.call(a,r)&&(e[r]=a[r])}return e}).apply(this,arguments)}var i,c={},b=(i="PageDescription",function(e){return console.warn("Component "+i+" was not imported, exported, or provided by MDXProvider as global scope"),Object(r.b)("div",e)}),p={_frontmatter:c},l=o.a;function s(e){var t=e.components,a=function(e,t){if(null==e)return{};var a,r,o={},n=Object.keys(e);for(r=0;r<n.length;r++)a=n[r],t.indexOf(a)>=0||(o[a]=e[a]);return o}(e,["components"]);return Object(r.b)(l,n({},p,a,{components:t,mdxType:"MDXLayout"}),Object(r.b)(b,{mdxType:"PageDescription"},Object(r.b)("p",null,"The DataPower Operator implements and uses ",Object(r.b)("a",n({parentName:"p"},{href:"https://kubernetes.io/docs/reference/access-authn-authz/admission-controllers/"}),"Kubernetes Admission Controllers")," for validating and defaulting ",Object(r.b)("inlineCode",{parentName:"p"},"DataPowerService")," requests.")),Object(r.b)("h2",null,"Background"),Object(r.b)("p",null,"During the DataPower Operator pod’s boot sequence, it will attempt to fetch and/or create several Kubernetes resources for the validating and defaulting webhooks. These resources include:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"Secret")," containing TLS key/cert for webhook API"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"Service")," to expose the webhook API"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"MutatingWebhookConfiguration")," for the defaulting webhook"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"ValidatingWebhookConfiguration")," for the validating webhook")),Object(r.b)("p",null,"The ",Object(r.b)("inlineCode",{parentName:"p"},"Secret")," and ",Object(r.b)("inlineCode",{parentName:"p"},"Service")," are owned by the DataPower Operator’s ",Object(r.b)("inlineCode",{parentName:"p"},"ReplicaSet"),", and thus share the same life cycle as the operator pod itself. However, the two webhook configurations are cluster-scope resources, and are instead owned by the operator’s ",Object(r.b)("inlineCode",{parentName:"p"},"ClusterRole"),". The expectation is that the ",Object(r.b)("inlineCode",{parentName:"p"},"ClusterRole")," shares the same life cycle as the DataPower Operator, but there are cases where this life cycle can be broken, leading to a mismatch between the TLS key/cert referenced by the configurations, and the TLS key/cert being used by the current operator pod."),Object(r.b)("h2",null,"Problem determination"),Object(r.b)("p",null,"If you see errors relating to ",Object(r.b)("strong",{parentName:"p"},"bad certificate")," or ",Object(r.b)("strong",{parentName:"p"},"x509 certificate validation")," being logged in the DataPower Operator pod, you are most likely seeing this issue. Some examples are shown below to assist with problem determination."),Object(r.b)("pre",null,Object(r.b)("code",n({parentName:"pre"},{}),"2020/05/05 04:13:22 http: TLS handshake error from x.x.x.x:57076: remote error: tls: bad certificate\n")),Object(r.b)("pre",null,Object(r.b)("code",n({parentName:"pre"},{}),'Internal error occurred: failed calling webhook "datapowerservices.defaulter.datapower.ibm.com": Post https://datapower-operator.namespace.svc:443/default-datapower-ibm-com-v1beta1-datapowerservice?timeout=2s: x509: certificate signed by unknown authority (possibly because of "crypto/rsa: verification error" while trying to verify candidate authority certificate "datapower-operator-ca")\n')),Object(r.b)("h2",null,"Resolution"),Object(r.b)("p",null,"To recover from this state, the following steps can be taken."),Object(r.b)("ol",null,Object(r.b)("li",{parentName:"ol"},Object(r.b)("p",{parentName:"li"},"Fetch the ",Object(r.b)("inlineCode",{parentName:"p"},"MutatingWebhookConfiguration")," resource from the cluster, taking note of the name (will be the first column in the output)."),Object(r.b)("pre",{parentName:"li"},Object(r.b)("code",n({parentName:"pre"},{}),"kubectl get MutatingWebhookConfiguration | grep datapower.ibm.com\n")),Object(r.b)("p",{parentName:"li"},"Note that if you are on a shared cluster, there may be multiple results from the above command, as there could be several instances of the DataPower Operator deployed across the cluster. If you need to filter down further, you can filter by the ",Object(r.b)("inlineCode",{parentName:"p"},"namespace")," you’ve deployed the DataPower Operator in. For example:"),Object(r.b)("pre",{parentName:"li"},Object(r.b)("code",n({parentName:"pre"},{}),"kubectl get MutatingWebhookConfiguration | grep datapower.ibm.com | grep namespace\n"))),Object(r.b)("li",{parentName:"ol"},Object(r.b)("p",{parentName:"li"},"Delete the ",Object(r.b)("inlineCode",{parentName:"p"},"MutatingWebhookConfiguration")," resource, where ",Object(r.b)("inlineCode",{parentName:"p"},"name")," is the name found in Step 1."),Object(r.b)("pre",{parentName:"li"},Object(r.b)("code",n({parentName:"pre"},{}),"kubectl delete MutatingWebhookConfiguration/name\n"))),Object(r.b)("li",{parentName:"ol"},Object(r.b)("p",{parentName:"li"},"Repeat Steps 1 and 2, for the ",Object(r.b)("inlineCode",{parentName:"p"},"ValidatingWebhookConfiguration")," resource.")),Object(r.b)("li",{parentName:"ol"},Object(r.b)("p",{parentName:"li"},"Fetch the DataPower Operator pod, taking note of the name (will be the first column in the output)."),Object(r.b)("pre",{parentName:"li"},Object(r.b)("code",n({parentName:"pre"},{}),"kubectl [-n namespace] get pod | grep datapower-operator\n"))),Object(r.b)("li",{parentName:"ol"},Object(r.b)("p",{parentName:"li"},"Delete the DataPower Operator pod, where ",Object(r.b)("inlineCode",{parentName:"p"},"name")," is the name of the pod found in Step 4."),Object(r.b)("pre",{parentName:"li"},Object(r.b)("code",n({parentName:"pre"},{}),"kubectl [-n namespace] delete pod/name\n")))),Object(r.b)("p",null,"The DataPower Operator’s ReplicaSet will spin up a new pod, which will create all the resources in the cluster again in a clean state."),Object(r.b)("h2",null,"Further Troubleshooting"),Object(r.b)("p",null,"If you continue to see issues after following the above steps, please engage IBM Support."))}s.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-troubleshooting-stale-webhooks-mdx-67105c6c96eaae598a6e.js.map